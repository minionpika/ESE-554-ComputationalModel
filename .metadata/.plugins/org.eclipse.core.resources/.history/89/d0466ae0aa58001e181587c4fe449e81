package stackWith2Queues;


class Queue
{
	private int maxSize, front, rear, nItems;
	private long[] queArray;

	public Queue(int s) {
		maxSize = s;
		queArray = new long[maxSize];
		front = 0;
		rear = -1;
		nItems = 0;
	}
	
	public void insert(long j) {
		if (rear == maxSize-1)
			rear = -1;
		queArray[++rear] = j;
		nItems++;
	}
	
	public long remove() {
		long temp = queArray[front++];
		if (front == maxSize)
			front = 0;
		nItems--;
		return temp;
	}
	
	public long peekFront() {
		return queArray[front];
	}
	public boolean isEmpty() {
		return (nItems==0);
	}
	public boolean isFull() {
		return (nItems==maxSize);
	}
	public int size() {
		return nItems;
	}
}
	
class StackDemo
{
	Queue q1, q2, q;	// q1 = main, q2 = processing
	
	public StackDemo(int s) {
		q1 = new Queue(s);
		q2 = new Queue(s);
	}
	
	public void push(long j) {
		q2.insert(j);
		
		while (!q1.isEmpty()) {
			q2.insert(q1.remove());
		}
		q = q1;
		q1 = q2;
		q2 = q;
	}
	
	public long pop() {
		return q1.remove();
	}
	public long peek() {
		return q1.peekFront();
	}
	public boolean isEmpty() {
		return q1.isEmpty();
	}
	public boolean isFull() {
		return q1.isFull();
	}
	public int size() {
		return q1.size();
	}
}

public class _1StackWith2Queues
{
	public static void main(String[] args) {
		StackDemo stack = new StackDemo(5);
		stack.insert(10);
		stack.insert(20);
		stack.insert(30);
		stack.insert(40);
		stack.remove();
		stack.remove();
		stack.remove();
		stack.insert(50);
		stack.insert(60);
		stack.insert(70);
		stack.insert(80);
		
		while(!stack.isEmpty()) {
			long n = stack.remove();
			System.out.print(n);
			System.out.print(" ");
		}
	}
}
