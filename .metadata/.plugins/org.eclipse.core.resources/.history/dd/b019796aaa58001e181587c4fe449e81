package stackWith2Queues;


class Queue
{
	private int maxSize, front, rear, nItems;
	private long[] queArray;

	public Queue(int s) {
		maxSize = s;
		queArray = new long[maxSize];
		front = 0;
		rear = -1;
		nItems = 0;
	}
	
	public void insert(long j) {
		if (rear == maxSize-1)
			rear = -1;
		queArray[++rear] = j;
		nItems++;
	}
	
	public long remove() {
		long temp = queArray[front++];
		if (front == maxSize)
			front = 0;
		nItems--;
		return temp;
	}
	
	public long peekFront() {
		return queArray[front];
	}
	public boolean isEmpty() {
		return (nItems==0);
	}
	public boolean isFull() {
		return (nItems==maxSize);
	}
	public int size() {
		return nItems;
	}
}
	
class StackDemo
{
	Queue q1, q2;	// q1 = main, q2 = processing
	private int maxSize;
	private int top;
	
	public void push(long j) {
		
	}
	public long pop()
	public long peek()
	public boolean isEmpty()
	public boolean isFull()
}

public class _1StackWith2Queues
{
	public static void main(String[] args) {
		Queue stack = new Queue(5);
		stack.insert(10);
		stack.insert(20);
		stack.insert(30);
		stack.insert(40);
		stack.remove();
		stack.remove();
		stack.remove();
		stack.insert(50);
		stack.insert(60);
		stack.insert(70);
		stack.insert(80);
		
		while(!stack.isEmpty()) {
			long n = stack.remove();
			System.out.print(n);
			System.out.print(" ");
		}
	}
}
